Prototyping Research Systems - Lab Assignments for 7.824
===============================================================================

RLZero grew out of the lab-component for an imaginary graduate-level course _7.824 Deep Reinforcement Learning Systems_.
The purpose of this course is to help graduate students acquire a fundamental understanding of the theoretical foundations of Reinforcement Learning,
and to help them get up to speed with the state-of-the-art in RL research. 
7.824 provides the student with a strong foundation for both applying Reinforcement Learning to complex problems,
and for addressing core research topics in Reinforcement Learning.
After creating this content, it became obvious that RLZero and the 7.824 labs could be very useful resource for the community.
Therefore we have made this library and the 7.824 labs public, in the hope that other researchers can benefit from our efforts.

Much of the class consists of studying and discussing case studies of RL systems.
The labs for 7.824 are a fundamental part of the curriculum, 
where students implement prototypes of state-of-the-art RL systems, as described in research publications. 
To this end, we present abstractions and implementation techniques for engineering distributed RL systems,
using the RLZero framework to illustrate these principles.

RLZero is a library of building blocks for Reinforcement Learning, which enables prototyping RL research papers quickly and effectively.
It is mostly based on the [Acme framework of DeepMind](), however it is not a library of RL algorithms.
Similar to the [Spinning Up]() library by Josh Achiam at OpenAI, RLZero is an educational resource for Reinforcement Learning.
RLZero offers a small and lightweight set of thoughtfully chosen abstractions that makes it simple and intuitive for engineers 
to create *modular* distributed RL systems consisting of components that are *flexible*, *reusable* and *fault-tolerant*.
Students use the RLZero framework to implement a series of RL systems of increasing complexity,
starting from [DQN/Rainbow]() and [Distributed DQN](), moving up to more recent distributed systems such as [D4PG](), [Impala](), [R2D2]() and finally [MuZero]().
The course culminates in a research project, where students
+ create a novel distributed RL algorithm
+ implement their system in RLZero
+ compare their algorithm's performance against suitable baselines
+ produce an 8-page report describing their work
The project is an integral part of this class, and is designed to be similar to researching and writing a conference-style paper.

-------------------------------------------------------------------------------
Structure
-------------------------------------------------------------------------------

<!--#TODO : describe the basic logistics of the lab assignments. -->
<!--#TODO : describe the infrastructure for the lab assignments. -->
<!--#TODO : describe the template for each of the lab assignments. -->
<!--#TODO : describe the spec for each of the lab assignments. -->

-------------------------------------------------------------------------------
Labs/Papers
-------------------------------------------------------------------------------
<!--#TODO : provide links to the individual labs / paper implementations --> 

-------------------------------------------------------------------------------
Solutions (Reference Implementations)
-------------------------------------------------------------------------------

Besides providing students with a template and a detailed specification for each lab/paper, 
each paper is accompanied with all of the logging output of our reference solution,
which is a useful baseline for students while they are debugging their own implementation.
After the submission deadline, we provide students with our source code to enhance the learning process.
Our implementations are reasonably good, although certainly not industrial grade.
We strived to make them as simple as possible, and we tried to stay close to the pseudocode from the paper,
all to make it simple for the student to study our implementation.
All of these implementations are freely available in a private companion repository [RLZero-Solutions]().
If you are an instructor, feel free to reach out to us, and we will gladly make our reference solutions available to you. 
